// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_24_usascii_BITMAP_HEIGHT         86
#define STB_FONT_consolas_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_24_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_24_usascii_NUM_CHARS             95

#define STB_FONT_consolas_24_usascii_LINE_SPACING          16

static unsigned int stb__consolas_24_usascii_pixels[]={
    0x20440131,0x037bea00,0x27fd9100,0x00fffffc,0x0006f2e2,0x7fffc593,
    0x4016406f,0x6400ab98,0x19700004,0x40002ae6,0x007910cb,0xc880ccb8,
    0x2a002203,0x803ba23c,0x001970ed,0x32205930,0xf5775003,0xec9ba209,
    0x1fffb300,0x37ffa200,0x1ff99952,0x3ffbfee0,0x43ffa004,0x203cccff,
    0x7fd403f9,0xfb00dfff,0x6f880003,0x007bffee,0x1be23fb0,0x0ffefd80,
    0x7fd40fe4,0x17f203ff,0x9bea09fb,0xfe8000fe,0x006f880f,0x209f5df9,
    0x017ee4fd,0x2e00bf91,0x07f400df,0x13ee1fec,0x7f87ff40,0x017f7100,
    0x3aeb3fee,0x05f980ef,0x511fdc00,0x4005ffd7,0x00df11fd,0x51fd4fea,
    0xb9ff509f,0x17f205ff,0x8ff60ff5,0xfe8000fe,0x006f880f,0x909f5df9,
    0x807fb0df,0x5fb006f9,0xfb81fd00,0x1001f903,0x2a03fc35,0x44fffffe,
    0x7f441ff8,0x0001fd03,0xff7007f4,0x447f6001,0x23f7006f,0x01dd14f8,
    0x82fdc5fb,0x42fe85fc,0x03fa0ff8,0x4406a200,0x5bf7006f,0x81ff989f,
    0x3fc01ff8,0xe800fe80,0x9817e20f,0x0ff0003f,0x67f6ffe4,0xa827e44d,
    0x007f507f,0x36013ea0,0x23fb004f,0x5f7006f8,0x817e53e2,0x41be60ff,
    0x45fb85fc,0x007f45fa,0x037c4000,0x44fadfb8,0x3fe603fe,0x7401fe00,
    0x20fe800f,0x22fc01fb,0x5eeeeeed,0x87fcc1fe,0x807fe07d,0x00df01ff,
    0x2e007f60,0xdeeca85f,0x26df11ff,0x6fcc3eed,0x04f99fd9,0x04fb8bfa,
    0x1ff10bf7,0x03fa17ec,0xeeeb93b6,0x2adf105e,0x67d41cfd,0x017ea4fa,
    0x07f80ff2,0xfd001fd0,0x9db33741,0xffff1b6b,0x83fcdfff,0xf81ba5fb,
    0xc817ec07,0x2fc4002f,0x3623fb80,0x1fffefff,0xfdff5df1,0x3fffb8bf,
    0xb7e401fd,0x9f700ffa,0x3fc4ff60,0x3bf607f4,0x1fffff20,0x777e77c4,
    0x49f504ff,0x5fa803fd,0x3a003fa0,0x221fd007,0xdfddf33f,0x9be601b6,
    0x7cff507f,0xd80df305,0x00bf103f,0xf9802fc8,0xd0b7f20f,0x33ffe23f,
    0x9883ff30,0xf8805f90,0x2e01efef,0x2edf504f,0x360fe84f,0x83fc405f,
    0x3ea4fff8,0x3e4fa80f,0x07f8801f,0xbf100bee,0x7d43fa00,0x2bf11fd1,
    0x26f9807c,0x5dff107f,0x01be609f,0x0fec07f9,0x7cc0ff00,0x1fe24fff,
    0x4ff88fec,0x3e604fb8,0x0bffb005,0x7fc09f70,0x0fe81fe9,0xff100bfb,
    0x3e0ffe20,0xf34fa81f,0x03fe001f,0x9066fec4,0x3a003df9,0x9f31f90f,
    0x403e53e6,0x981fe6f9,0x980cfffe,0x017ec07f,0x3ea009f5,0x20bbe603,
    0x23fb04fb,0x0bf307f8,0x3a2007f4,0xff11ffef,0x3f204fb8,0xb1fd06fd,
    0x1fe200bf,0x2fd83fc4,0x0df54fa8,0xd1017ec0,0x3ffe23ff,0x6c3fa001,
    0x4bea5f77,0x26f9806d,0xffeb807f,0x203fc43f,0x07f401fe,0xf3007f40,
    0x6c0ff209,0x260df11f,0x325f706f,0xda7ec1de,0x546f98ef,0x3ffe203f,
    0x0dfbfd03,0xf883fc40,0xf505fb06,0xb8013ee9,0x13bf504f,0x003fd988,
    0x7e5b61fd,0x01b63f91,0x007f9be6,0xf8bffbf7,0x01ff101f,0x7cc03fb8,
    0xd827cc05,0x223fb02f,0x10df306f,0x3ff7fabf,0xdfe8ff11,0x01fd45fa,
    0xafe81ff6,0xff1002ff,0x7ec1be20,0xbf54fa82,0xc827e400,0x006f800f,
    0x7edba1fd,0x013e1fb0,0x007f9be6,0xc8ffe6f9,0x00bf704f,0x1fc80df1,
    0xfc816440,0x3e23fd04,0xfd0bf506,0x53e67f31,0x7ffc46f9,0x200e4c2f,
    0x23fa03fd,0xf8802ff9,0x360df107,0xf14fa82f,0x81fec00f,0x01fd007e,
    0x65ba1fd0,0x0be6ff1f,0x07f9be60,0x32fdcdb0,0x1ffa87ff,0x2203f900,
    0xfb80006f,0xf11ffb85,0xf70ff20d,0x35f87ee7,0x1fff50ff,0x01ff5000,
    0x1ffa87f4,0xf883fc40,0xf505fb06,0xf800ff49,0x200fd02f,0x0fe800fe,
    0x3b73eadb,0x9800fdbf,0x7401fe6f,0xff713f65,0x005ffdbd,0x2fb82fcc,
    0xf104e980,0x8fffd43f,0x46fa86f8,0x44bea6f8,0xd50ffe4f,0x03ea83ff,
    0xfe803ff5,0x8807fee0,0x20df107f,0x24fa82fd,0x7f9802fc,0x7f401fa0,
    0xf90fe800,0x3fa3bf62,0x4df3001f,0x67c1307f,0xda81ffb8,0x8001dfff,
    0x007e80fe,0x3f601ffb,0x1fccfedf,0xfb99dff1,0x221fd83f,0x2a1fdbef,
    0xefffceff,0x99ffe0ef,0xe803ffff,0x907fe40f,0x999ff999,0x7ec1be23,
    0x3ea4fa82,0x205fa804,0x01fd007e,0x83ee1fd0,0x3e6000c0,0x7fec1fe6,
    0x03fffffe,0x500027dc,0x004fa89f,0xffc80df7,0x6dc3f93e,0x540defff,
    0x2fffa83f,0x1dfffea8,0x32fe4bfd,0x3a0019bd,0xf0efd80f,0xffffffff,
    0x7ec1be27,0x3e24fa82,0x00ff400f,0x03fa00ff,0x1fcc3fa0,0x4bf50000,
    0xffdb507f,0xf30019df,0x3e00081f,0x10007ec7,0x04000400,0x04002000,
    0x00000300,0x00000000,0x37dc4fa8,0x7cc0bf90,0x007fb006,0x003741fd,
    0x3fc9fb00,0x4000fdc0,0x06fcdffd,0x2fccbee0,0x00000000,0x00000000,
    0x00000000,0x40000000,0x84fd84fa,0xfb300ffa,0x07bee009,0x2fdc1fd0,
    0x5c433028,0x201fe0ff,0xf90000fc,0x44007fff,0x0003953c,0x00000000,
    0x00000000,0x00000000,0x9f500000,0x7c43fd10,0xeffe982f,0x3fffa000,
    0x1ffddd72,0xfdcdffb8,0xffdff707,0xeeeff87f,0x80005c84,0x00000008,
    0x00000000,0x00000000,0x00000000,0x54000000,0x6cdf304f,0x079d303f,
    0x5cbb2e00,0x980eeeee,0x100bdedb,0xb039ddd9,0x0009dddd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0x98aa04fa,0x00000004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x27d40000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26000000,0x0000003e,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7777f644,0xcca800ee,0x805100bc,0x804cccca,0x1dcdeeca,
    0x3bb669d1,0x055cc403,0xaaaaaa98,0x02ae601a,0x20553100,0x5c01aba8,
    0x5554c04f,0x35953100,0x555554c1,0x401530aa,0x55d4c02a,0x02aba980,
    0x55555553,0x02aa2355,0xba880aa8,0x9bff100a,0x401ddffd,0x2fffffe8,
    0xffc80ff0,0x7fec07ff,0xf11fffee,0xbffdff5b,0x3ffffea0,0x7fffe40d,
    0xff984fff,0x5c404fff,0x6446ffff,0x81efffff,0xfb82fff8,0x644fffff,
    0x25ffffff,0xfffffffc,0x3e205fb1,0xfffff907,0x7fffe4bf,0x7ffdc3ff,
    0x25ffffff,0x1ff504fe,0x7ffffec4,0x7e43fd83,0x12dfd804,0x101fe013,
    0x640ff333,0x88ff40df,0xff30cfff,0xbacffb83,0x33f20efe,0x541aaaaa,
    0x4feb9bff,0x59bfff30,0xa9befd85,0xfff80ffd,0x55e7fec1,0x33bf64ec,
    0x2a63baab,0xb1feaaaa,0x11fe205f,0xb9579ffd,0x6dcd5dcb,0x333261ff,
    0x24ffcccc,0x7f441ff9,0x655eff42,0x443fc1ff,0x01ff807f,0xf8801fe0,
    0xb01ff107,0x213fe23f,0x07fe24fb,0x0fe47fd1,0x7c42fe80,0x01ffc40f,
    0x3fe03fe2,0x7dc2c982,0x3fe6101e,0x47fa0001,0x8ff102fd,0x00100efd,
    0x3ee009fd,0x7e45fc86,0x5fc82a85,0x1fe21fe2,0xe980df30,0xeeeeffee,
    0x707f881e,0x447f60df,0x64bf307f,0x64ff504f,0x05fa801f,0x03fc89f7,
    0x5fb06f88,0x007fe200,0xd00017ee,0x440bf63f,0x003fea7f,0x100bf700,
    0x5ff103ff,0x98003fe6,0x2e17f46f,0x02fcc05f,0x3fffffe6,0xf882ffff,
    0x3609f907,0x260df11f,0xf807fe6f,0x9003f91f,0x8dfd305f,0x0bfa007f,
    0x7dc00ff1,0x01ff5005,0xfd8ff400,0x7ecff102,0x2fc80003,0x2a04fd80,
    0x003fe8ff,0x3fea37cc,0x400ffdac,0x3fc005f9,0x360ff100,0x223fb02f,
    0x7cdf306f,0xfc97ec07,0x07f6019a,0x7ccffff7,0x50135515,0x7ff519ff,
    0x801fe400,0x0002efe8,0x40bf63fd,0x007fa7f8,0x801df300,0xefd806fa,
    0x5fb8006f,0x6fffeff4,0xffffff00,0x7c0fffff,0x41fe2007,0x23fd03fc,
    0x29f506f8,0x9fec06f9,0x2dfffffc,0xefd887f4,0x3bbea7f9,0x982fffff,
    0x001fffff,0xd30017ec,0x40017dff,0x205fb1fe,0x983fe7f8,0x7443cccc,
    0xf8805fee,0xfff8801f,0x17f44001,0x640049f3,0xcccffdcc,0x801fe04c,
    0x09f707f8,0x1be23ff7,0x06f99fe4,0xccca9fe4,0x3fe2fffd,0xff0dff98,
    0x26f7fee1,0x6c41ffca,0x2a03ffff,0x000bfa2d,0x00ffffae,0x02fd8ff4,
    0x51fe2ff1,0xf98dffff,0x200cffff,0x3fa004fd,0x2fec000f,0x40007bea,
    0x3fc005f9,0x220ff100,0x3ffea0ff,0xfb88df11,0xfb01fe66,0x3a7fc805,
    0x3fc3ffcf,0x97f209f7,0xffc8cfe9,0x363fff05,0x36a0002f,0x1fe805ff,
    0x5fe205fb,0x54cc47f8,0x37ecc06f,0x2e006fa8,0x32005fff,0x7ff440ef,
    0x402dffff,0x3fc005f9,0x6c0ff100,0xfdcfecff,0xf99dff11,0x03fc43ff,
    0xff1007fa,0x107bff63,0x9827dcff,0xf30bfe6f,0x27ffd05f,0xa80003fc,
    0x8ff402ff,0x4ff102fd,0x0df300ff,0xff10bfa0,0x27fe6003,0xefc802ff,
    0xdddbf900,0x7cc09fff,0x003fc005,0xffc80ff1,0x3e23fb3e,0x80dfffff,
    0x1ff101ff,0x3f25fd00,0x2a5fa80d,0x26ff105f,0x30bf905f,0x01bee7ff,
    0x2027e400,0x207f91fe,0x40ffa5fa,0x7f9006f9,0x3a004fd8,0x401ff73f,
    0xbf700efc,0xf981fee0,0x00ff4005,0x81007f88,0x22df11fd,0xb827e400,
    0x0ff8805f,0x8bf60df3,0x2bf507f8,0x0bf704fb,0x17fc47fe,0x01fe4000,
    0x13ee1ff3,0x1ff527e4,0x3a00df30,0x003bea1f,0x13fa37dc,0xfb0077e4,
    0x403fe205,0x7ec005f9,0x00ff1004,0x37c47f60,0xa87ff100,0x7ec400ff,
    0x3ea1ff44,0x7444fd87,0xd01ff52f,0xc8df707f,0x011882ff,0x20b8ffcc,
    0x3fe66fc8,0x3a0ffcc1,0x037cc0ef,0x3ff137dc,0x30bfe200,0x0efc83ff,
    0xfc837ec0,0x0017e605,0x3b99fff3,0x2000ff10,0x00df11fd,0xfeceffb8,
    0x6e666c3f,0xdff985ff,0xf981ffdc,0x44fecbdf,0xffcccffe,0x2077f646,
    0xeddfffd8,0xb9bdfb4f,0x77f49ffd,0x7e41fffd,0x84ffecdf,0xecdeffe8,
    0x3733366f,0x3ff20fff,0x6fffffff,0x37e417f6,0xfffffff3,0x3ffe6dff,
    0x00effeee,0x2a0017e6,0x991ffffe,0x3999ff99,0x7c47f600,0xffea8006,
    0xfffe81df,0x3f6202df,0x36201dff,0xb882efff,0x40bfffff,0x7f5403df,
    0xff72ceff,0xb85bffff,0x700dfffe,0x805dfffd,0x2dffffeb,0x0fbffffe,
    0x3ffffff6,0x1ff76fff,0x7cd3fe20,0xffffffff,0x3bbbae26,0x05f9802c,
    0x3fe04c00,0x3fffffff,0x3a23d900,0x400c0005,0x01800099,0x26200180,
    0x00400000,0x044004cc,0x4c000600,0x00026601,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2a880355,0x8aa002aa,0x0d4401a9,0x55301550,0x05531540,
    0xaaa98aa6,0x11aaaaaa,0xa8aa6055,0xaaaaaaaa,0x555550aa,0x2a615555,
    0x55455100,0x2a6009aa,0x22aaaaaa,0xaaaaaaa9,0x026aaa62,0x81a85500,
    0x0099aaaa,0x40005550,0x09f702aa,0x5fc80df7,0xdf5013f6,0x3e601fd4,
    0x81ffea84,0x6f883ffc,0x3fe03ff6,0x3fffff26,0xdf15ffff,0x7fc5ff10,
    0xffffffff,0xffffff0f,0x0bf61fff,0xffff37c4,0xff907fff,0x64ffffff,
    0x7fffffff,0x3ffffff6,0x265f800d,0x7fffc43f,0x2200cfff,0xb8002fff,
    0xfff887ff,0xf103ff82,0x203fd41f,0x013ea3fc,0x7ff4c7f3,0x6ffc81ff,
    0x3ff66f88,0x953ffd43,0xfb999999,0x3fa1be2b,0x7ed55543,0x550aaaad,
    0x1555bfb5,0x37c40bf6,0xffd957ff,0xaaadfc87,0x2b3f22aa,0x3f62aaaa,
    0x2ffecbac,0x85f527c0,0xfcbaaff8,0x3ffea05f,0x7ffc4004,0x503fff07,
    0x09fb01ff,0x0ffc03ff,0x3fa809f3,0x3ff3bff3,0x885fdf90,0xb1bfba6f,
    0x7f400fdd,0x4fd8df11,0x7004fb80,0x40bf609f,0x321fe6f8,0x401fe47f,
    0x2fd803fc,0xf100ffb8,0x3e20fdc9,0xb00ff887,0xd800ff5f,0x59307fbf,
    0x3e627f40,0x304fd80f,0x405f98df,0xff8722fa,0x46fbfc81,0x3f3ba6f8,
    0x00fb9f10,0x26f89be6,0x9f7005fb,0x6c13ee00,0x7cdf102f,0x320ff887,
    0x03fc803f,0xbfb02fd8,0xaadfbaa8,0xff11abfd,0x3e207fa0,0x2a003fd7,
    0x0007f8cf,0x3fd83fe6,0x3f20df50,0x8262fc43,0x07fe02fb,0x88bf6bf2,
    0x4fe7ba6f,0x800fd9fb,0x4dbe22fd,0x9f7000ef,0x6c13ee00,0x7cdf102f,
    0x7e47f887,0x803fc803,0x8ff302fd,0xfffffffe,0x0ff15fff,0xba7d41fe,
    0x8ff8804f,0x6c0007f8,0xf80df34f,0x440fe81f,0xfb8fea6f,0x3207fe01,
    0x3e26faaf,0x6eb75be6,0x6f9801fb,0x0ffc77c4,0x2009f700,0x05fb04fb,
    0xc87f9be2,0x401fe45f,0x2fd803fc,0x3ee03fe0,0x1fe21f61,0x97ec13f2,
    0x2fd807f9,0x88000ff1,0x402fd8ff,0x837cc4fd,0xfc9bf26f,0x3207fe01,
    0x3e23fd2f,0x7d7e57e6,0xfd801fb3,0x17f7fc42,0x4013ee00,0xddfb04fb,
    0x4dfddddd,0xefecbbff,0x66677e40,0x3bbf22cc,0x3f64eeee,0x3207fe02,
    0x3e21ba0f,0x02ffeeef,0x01fe8ff1,0x07f897ea,0x6fefc800,0x7e46fa80,
    0x7ffcdf03,0x7fc01f91,0xbf52fc81,0xf35f9be2,0x807f21ff,0xfff886f9,
    0x27dc002f,0xfb04fb80,0xffffffff,0x7fffffcd,0xffffc80b,0x3ff25fff,
    0x366fffff,0x207fa02f,0x7c42fc7c,0x2effffff,0x27e45fa8,0x3fc41fd0,
    0xff100150,0x87fe003f,0x2afd00fe,0x01f94fcf,0x17e40ffc,0x22df13ff,
    0xfc97fa5f,0x220bf601,0x000ffaef,0x7dc013ee,0x2205fb04,0x3267fe6f,
    0x9cfc80ef,0x3f209999,0x202fd803,0x7c7d81ff,0x6447f884,0x217ec1ff,
    0x85f907f9,0x1ffd07f8,0x400bf700,0x40df33fd,0x2df1f97e,0x40ffc07d,
    0x233ee2fc,0x7dcbf16f,0x7cc07f22,0x3eedf106,0x09f7000e,0x7ec13ee0,
    0x3fcdf102,0x0ff213f2,0x3600ff20,0x21ff102f,0xeeeffeea,0x1fe26eff,
    0x3ff12fe4,0x83ff3333,0x99999ef9,0xff1099ff,0x09f7005f,0x3fbb7d40,
    0x657e3f60,0x7fc07d9f,0x3e22fc81,0x0bf36f9f,0x7fb02fc8,0x5fd9be20,
    0x2009f700,0x05fb04fb,0x447f9be2,0x01fe40ff,0x7ec01fe4,0x64cdf702,
    0xdfdccefc,0x541fe24c,0x3fffea6f,0x5c4fffff,0xffffffff,0x3bf64fff,
    0x004fb800,0x007f47fc,0x3e65f7f9,0x0ffc06ec,0x33f217e4,0xb809f36f,
    0x207f982f,0x0ffe26f8,0x5c013ee0,0x205fb04f,0x321fe6f8,0x401fe44f,
    0x2fd803fc,0xf882ff88,0x3e20bea4,0x7ec9fb07,0xfdcccccd,0x666664c6,
    0x42ccffcc,0x013ee001,0x80df9fb0,0x77fc7efc,0x640ffc06,0xb7ffc42f,
    0x1fdc04f9,0xdf101fec,0x5c01ff98,0x09f7004f,0x37c40bf6,0x41ff30ff,
    0x3fc803fc,0x7d42fd80,0x5c9f105f,0x447f881f,0x1ff12ffa,0x8800ffc0,
    0xf700007f,0xfffa8009,0x22ffdc03,0x776c5ffc,0x93eeeffe,0x2dff905f,
    0x1fdc04fa,0xf8803fe6,0x200ffb86,0x3bb604fb,0xb0eeeffe,0xf9be205f,
    0x7e49fb07,0xeeefc803,0x3bf66eee,0x205fffee,0x203f23f9,0xffeeeff8,
    0xb017ea3f,0x1fe2009f,0xfb805b70,0x0fff8004,0x2617fdc0,0x7fffc5ff,
    0xf94fffff,0x2adff105,0x21fdc04f,0x37c403fd,0x3ee06fd8,0x3ffffe04,
    0x5fb0ffff,0x07f9be20,0x0ff21ff3,0x3fffff20,0x3fff67ff,0x7d401cee,
    0x3e203f22,0x40ceffff,0x37d403fd,0x2207f880,0x00000fff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xa8bffe00,0x51019aaa,0xaba88005,0x80003900,0xefdb80d8,0xfedb880c,
    0x76dc01de,0xdfb703de,0x44000039,0xb83d905e,0x6c1eefed,0x6eeeeeee,
    0x54bb62f6,0x82f640de,0x21d70dea,0x7441dfdb,0x8839fb54,0x43b600ee,
    0x274c02ea,0xfa801c88,0xfffff12f,0x37cc17ff,0xfffff900,0x003ff987,
    0xfd87ff30,0x5c2ffede,0x2fffeeff,0xfeeffe98,0x7f7ff4c7,0x4fa803ff,
    0x7ec1be20,0x3bbbffa2,0x7ffff42f,0x373e7fff,0x5fef9ffe,0x3e21ffc4,
    0x3f27f22f,0x3e21fffe,0x4ffeefcd,0x6fa81fec,0x9f5013ea,0x2200be20,
    0x55ff10ff,0x7ccbffd7,0x35bfb006,0xff987ff5,0x17fdc004,0x1ff513f2,
    0x1fee20cc,0xe85037fa,0x00ffd44f,0x6f8813ea,0x17ee5fb0,0x23fe8004,
    0x4efb8eff,0x43ff30fd,0x7f7e44fd,0xff897f22,0xa83fea3f,0x4c7fb06f,
    0x51fdc05f,0x81c47e23,0x21fe25fc,0x0df33ff8,0xdf30df50,0x001bfd10,
    0x6f883df9,0x3e007f90,0x2017f20f,0x0bf905fa,0x3e204fa8,0x3f25fb06,
    0x17f20003,0xd9fea5ff,0xf56fc80f,0x983ff90d,0x20ffe26f,0x20ffc1ff,
    0x9be20ff8,0xe87f22e9,0x1ff73f4f,0x883bfb22,0x26bf907f,0x03fc806f,
    0x3bf605fb,0x01dfb100,0x13ea09f5,0x3fd0fec0,0x2205f900,0x027d406f,
    0x4bf60df1,0xa8002ffb,0xf53fc0ef,0xfe807ec9,0x3fc80ffc,0x1fe25e88,
    0x13f217ec,0x64ff09f7,0xd503f65f,0x4c17fdfd,0x07f882de,0x01be6df5,
    0x1fdc0bf6,0xe883ff70,0x3bbee04f,0x45feeeee,0xffffeec9,0x3a003fe1,
    0x331fe01f,0x333bf733,0xfd837c43,0x077fff62,0x3e07fe60,0x0fd8fea7,
    0x205fff10,0xdf1002fc,0xff10bf60,0x27e81fe8,0x20fd0ffe,0x8001ffe8,
    0x2bfb07f8,0x3fd806f9,0xfb809f70,0x80bff11f,0xeeeeeefc,0x3bfee4ee,
    0xf11ffccc,0x807fa00f,0x7ffffc7f,0x11ffffff,0x30bf60df,0x201dfffb,
    0x4ff02fe8,0x403f63fa,0xf900ffe8,0x41be2005,0x32fd82fd,0x263f60df,
    0x88df3fcf,0x1dfdfdfc,0x221fe200,0x00df32ff,0xbf901df5,0x2a1ffcc0,
    0x17ee03ff,0x6c0ffc40,0x2003fe1f,0x8df102fd,0xcefdcccc,0x0df10ccc,
    0x75440bf6,0x409fb06f,0xfd8fea7f,0x1dfdfb00,0x22005f90,0x505fb06f,
    0x5c0ff2bf,0xf6f8fc9f,0x33f2fe8b,0x2aaa61fd,0x33ff12aa,0x7ccbffb7,
    0x99ffd006,0x2e09fffb,0x9fd302ff,0x2003fea0,0x43fd05fa,0x4fc803fe,
    0xfa80bf70,0x2207fc04,0x7fc402ff,0x3e037dc0,0x0fd8fea7,0x0bfb6fb8,
    0x3e2005f9,0x3e05fb06,0xf500fe8f,0x3ebf2bd7,0x21f884c4,0x3fffffa1,
    0xffffff17,0x006f987f,0x333fffb2,0x01efc83f,0x7406ff44,0x37d400cf,
    0xfa87ff62,0xff1040bf,0x401ff983,0x17fc04fa,0x9805ffd1,0x007fcc7f,
    0x363fa9fe,0x88ffcc0f,0x017e43ff,0x5fb06f88,0x817f7f20,0xbf32fdf9,
    0x817c407f,0x14cccccb,0x013599ff,0x90000df3,0x077ec45f,0x981dfb00,
    0xeccbdfff,0xfb9dff10,0xffd83fdf,0x7dc7ecdf,0x03ffdcdf,0x7dc04fa8,
    0x2fdefcdf,0xffb999dd,0xeeefff89,0x54ff2eee,0xf883f63f,0x90ffcc3f,
    0x1be2005f,0xff9817ec,0x3ffe202f,0x880bffe0,0xff10000a,0x001be600,
    0x7f443fa0,0x3ff70005,0xfffffd88,0x3fffa60e,0xea81fc8d,0xea85ffff,
    0x5001efff,0xffd5009f,0x3f65f71b,0xf82effff,0xffffffff,0xb1fd4ff2,
    0xc82fec1f,0x005f90ff,0x17ec1be2,0xff00dfd0,0x000ffc8b,0x01fe2000,
    0x200037cc,0x00fa23fc,0x4403f500,0x00044009,0x00300088,0x44001310,
    0x00999800,0x00000000,0x00000000,0x00000000,0x07f88000,0x2000df30,
    0x00006fd9,0x00000000,0x00000000,0x00000000,0x99880544,0x09999999,
    0x02ee6577,0x36a01773,0x2ca8103d,0x3bbbbbba,0x00eeeeee,0x40000000,
    0xff3007f8,0x45dddddd,0x0cfffeed,0x00000000,0x00000000,0x00000000,
    0x37ec0000,0xffffffa8,0x27fd4fff,0xefb80ffa,0x2ffffdc0,0x7ffccbee,
    0xddddddd1,0x01dddddd,0x80000000,0xff3007f8,0x47ffffff,0x001cdefe,
    0x00000000,0x00000000,0x00000000,0x3fdfa800,0xaaaaaa88,0x27fd1aaa,
    0x3be607f9,0x3f627fa0,0xf50fd88d,0x000005ff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3add0000,0x7ec0000f,0x9880ff32,
    0xffd8bf10,0x037f45ff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x40000000,0x889f31fb,0x99999999,0x3e25fb09,0xb81a8006,
    0x000104ee,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xf1000000,0x3ea1fd8b,0xffffffff,0x1be23f94,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0x337c40fc,
    0x77777777,0x00000057,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x04f98000,0x000007f7,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x0004c018,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_24_usascii_x[95]={ 0,5,3,0,1,0,0,5,3,3,1,0,2,3,
4,1,1,1,1,1,0,2,1,1,1,1,4,2,1,1,2,3,0,0,1,1,1,2,2,0,1,2,2,1,
2,0,1,0,1,0,1,1,1,1,0,0,0,0,1,4,1,3,1,0,0,1,1,1,1,1,0,1,1,2,
1,2,2,1,1,1,1,1,2,2,0,1,0,0,0,0,1,1,5,2,0, };
static signed short stb__consolas_24_usascii_y[95]={ 17,0,0,1,-1,0,0,0,-1,-1,0,4,13,9,
13,0,1,1,1,1,1,1,1,1,1,1,5,5,4,7,4,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,20,0,5,0,5,0,5,0,5,0,0,
0,0,0,5,5,5,5,5,5,5,1,5,5,5,5,5,5,0,-3,0,8, };
static unsigned short stb__consolas_24_usascii_w[95]={ 0,4,8,13,11,13,14,3,8,7,11,13,7,8,
5,11,12,11,11,11,13,10,11,11,11,11,5,7,10,11,10,8,14,14,11,11,12,10,10,12,11,10,9,12,
10,13,11,13,11,14,12,11,12,11,14,13,13,14,11,6,11,7,11,14,8,11,11,11,11,11,13,12,11,10,
10,11,10,12,11,12,11,11,11,10,12,11,13,13,13,13,11,10,3,10,13, };
static unsigned short stb__consolas_24_usascii_h[95]={ 0,18,6,16,21,18,18,6,23,23,11,13,9,3,
5,20,17,16,16,17,16,17,17,16,17,16,13,17,14,7,14,18,22,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,21,16,17,16,17,16,16,16,16,16,22,20,22,9,2,6,13,18,13,18,13,17,17,17,17,
22,17,17,12,12,13,17,17,12,13,17,13,12,12,12,17,12,22,25,22,5, };
static unsigned short stb__consolas_24_usascii_s[95]={ 252,198,168,192,85,169,183,252,5,14,235,
107,247,247,200,124,101,45,243,205,233,90,114,83,126,24,247,138,47,156,36,
136,52,218,206,146,179,168,157,192,132,121,170,95,13,69,57,76,1,97,144,
158,108,180,16,31,229,1,217,78,112,44,144,206,177,70,157,82,145,58,14,
1,240,229,67,217,41,156,195,94,64,52,183,133,28,121,207,221,169,203,144,
33,1,22,186, };
static unsigned short stb__consolas_24_usascii_t[95]={ 8,1,75,45,1,1,1,1,1,1,62,
62,59,69,75,1,27,45,27,27,45,27,27,45,27,62,45,27,62,75,62,
1,1,45,45,27,45,45,45,27,45,45,27,45,62,45,45,27,62,1,45,
27,45,27,45,45,27,45,27,1,1,1,75,75,75,62,1,62,1,62,27,
27,1,1,1,1,27,62,62,62,27,27,62,62,27,62,62,62,62,1,62,
1,1,1,75, };
static unsigned short stb__consolas_24_usascii_a[95]={ 211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_24_usascii_BITMAP_HEIGHT or STB_FONT_consolas_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_24_usascii(stb_fontchar font[STB_FONT_consolas_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_24_usascii_BITMAP_HEIGHT][STB_FONT_consolas_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_24_usascii_s[i] + stb__consolas_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_24_usascii_t[i] + stb__consolas_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_24_usascii_x[i];
            font[i].y0 = stb__consolas_24_usascii_y[i];
            font[i].x1 = stb__consolas_24_usascii_x[i] + stb__consolas_24_usascii_w[i];
            font[i].y1 = stb__consolas_24_usascii_y[i] + stb__consolas_24_usascii_h[i];
            font[i].advance_int = (stb__consolas_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_24_usascii_s[i] + stb__consolas_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_24_usascii_t[i] + stb__consolas_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_24_usascii_x[i] + stb__consolas_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_24_usascii_y[i] + stb__consolas_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_24_usascii_LINE_SPACING
#endif

